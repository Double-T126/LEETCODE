# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: None Do not return anything, modify head in-place instead.
        """
        if not head or not head.next:
            return head

        slow,fast=head,head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next

        l1,l2=head,self.reverseList(slow.next)
        slow.next=None

        while l1 and l2:
            cur=l2
            l2=l2.next

            cur.next=l1.next
            l1.next=cur
            l1=l1.next.next
        return head

    def reverseList(self,head):
        if not head or not head.next:
            return head
        p=self.reverseList(head.next)
        head.next.next=head
        head.next=None
        return p
